{
	"info": {
		"_postman_id": "4f06945b-8854-49a1-8431-ab45f389953c",
		"name": "Backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Service",
			"item": [
				{
					"name": "Tellows",
					"item": [
						{
							"name": "tellows - get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"OK\")",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
											"    pm.expect(pm.response.code).to.equal(200)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"valid\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.valid).to.be.a(\"bool\")",
											"});",
											"",
											"//set environment variable",
											"",
											"//pm.environment.set(\"unitary_test_user_id\", )"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"magicNumber\": 42\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{base_url}}/service/tellows?phonenumber=%2B33684533519&magicNumber=42",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"service",
										"tellows"
									],
									"query": [
										{
											"key": "phonenumber",
											"value": "%2B33684533519"
										},
										{
											"key": "magicNumber",
											"value": "42"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Server HeatlhCheck",
			"item": [
				{
					"name": "Success",
					"item": [
						{
							"name": "Server HealthCheck - get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"OK\")",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
											"    pm.expect(pm.response.code).to.equal(200)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"server\")",
											"    pm.expect(pm.response.text()).to.include(\"environment\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.server).to.be.a(\"object\")",
											"  pm.expect(responseJson.environment).to.be.a(\"object\")",
											"});",
											"",
											"//set environment variable",
											"",
											"//pm.environment.set(\"unitary_test_user_id\", )"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"magicNumber\": 42,\n    \"email\": \"{{unitary_test_user_email}}\",\n    \"userName\": \"{{unitary_test_user_name}}\",\n    \"password\": \"{{unitary_test_user_password}}\",\n    \"customerInfos\": {\n        \"firstName\": \"Postman name\",\n        \"lastName\": \"Postman last name\",\n        \"phoneNumber\": \"3514831131\"\n    },\n    \"localization\": {\n        \"country\": \"WorldWideWeb\",\n        \"region\": \"World\",\n        \"adress\": \"595 Market St, San Francisco, CA 94105\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{base_url}}/server/healthCheck?magicNumber=42",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"server",
										"healthCheck"
									],
									"query": [
										{
											"key": "magicNumber",
											"value": "42"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "Server HealthCheck - Error - Wrong magicNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"BAD REQUEST\")",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 500])",
											"    // pm.expect(pm.response.code).to.equal(400)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"error\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.error).to.be.a(\"string\")",
											"})",
											"",
											"pm.test(\"Response fields should match size\", () => {",
											"    pm.expect(responseJson.error).to.be.equal(\"bad_request\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{base_url}}/server/healthCheck?magicNumber=41",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"server",
										"healthCheck"
									],
									"query": [
										{
											"key": "magicNumber",
											"value": "41"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Tests and Tempory",
			"item": [
				{
					"name": "Test directly on Tellows api",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.tellows.fr/basic/num/0000000000?apikeyMd5=31e664793ebfc5bc0b063db059de3e3a&json=1",
							"protocol": "https",
							"host": [
								"www",
								"tellows",
								"fr"
							],
							"path": [
								"basic",
								"num",
								"0000000000"
							],
							"query": [
								{
									"key": "apikeyMd5",
									"value": "31e664793ebfc5bc0b063db059de3e3a"
								},
								{
									"key": "json",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account Management",
			"item": [
				{
					"name": "update Email - get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 600ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(600)",
									"});",
									"",
									"pm.test(\"Response status should be success\", () => {",
									"    pm.response.to.have.status(\"OK\")",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
									"    pm.expect(pm.response.code).to.equal(200)",
									"    console.log(\"Reponse code is: \", pm.response.code)",
									"});",
									"",
									"pm.test(\"Response should have a json body\", () => {",
									"    pm.response.to.be.withBody",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
									"    pm.response.to.be.json",
									"})",
									"",
									"const responseJson = pm.response.json()",
									"pm.test(\"Response json body should have the required fields\", () => {",
									"    pm.expect(pm.response.text()).to.include(\"updated\")",
									"})",
									"",
									"pm.test(\"Required fields should be of the right data type\", () => {",
									"  pm.expect(responseJson).to.be.an(\"object\")",
									"  pm.expect(responseJson.updated).to.be.a(\"array\")",
									"});",
									"",
									"pm.test(\"Required fields should have right value\", () => {",
									"    pm.response.to.have.jsonBody('updated', 'postmanNewTest@test.com')",
									"});",
									"",
									"//set environment variable",
									"",
									"//pm.environment.set(\"unitary_test_user_id\", )"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"\",\n    \"email\": \"postmanNewTest@test.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}/user/updateEmail",
							"protocol": "http",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"updateEmail"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 600ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(600)",
									"});",
									"",
									"pm.test(\"Response status should be success\", () => {",
									"    pm.response.to.have.status(\"OK\")",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
									"    pm.expect(pm.response.code).to.equal(200)",
									"    console.log(\"Reponse code is: \", pm.response.code)",
									"});",
									"",
									"pm.test(\"Response should have a json body\", () => {",
									"    pm.response.to.be.withBody",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
									"    pm.response.to.be.json",
									"})",
									"",
									"const responseJson = pm.response.json()",
									"pm.test(\"Response json body should have the required fields\", () => {",
									"    pm.expect(pm.response.text()).to.include(\"deleted\")",
									"})",
									"",
									"pm.test(\"Required fields should be of the right data type\", () => {",
									"  pm.expect(responseJson).to.be.an(\"object\")",
									"  pm.expect(responseJson.deleted).to.be.a(\"array\")",
									"});",
									"",
									"pm.test(\"Required fields should have right value\", () => {",
									"    pm.response.to.have.jsonBody('deleted', true)",
									"});",
									"",
									"//set environment variable",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{unitary_test_user_token}}\",\n\t\"userName\": \"{{unitary_test_user_name}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}/user/deleteAccount",
							"protocol": "http",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"deleteAccount"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "register - post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 600ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(600)",
									"});",
									"",
									"pm.test(\"Response status should be success\", () => {",
									"    pm.response.to.have.status(\"OK\")",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
									"    pm.expect(pm.response.code).to.equal(200)",
									"    console.log(\"Reponse code is: \", pm.response.code)",
									"});",
									"",
									"pm.test(\"Response should have a json body\", () => {",
									"    pm.response.to.be.withBody",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
									"    pm.response.to.be.json",
									"})",
									"",
									"const responseJson = pm.response.json()",
									"pm.test(\"Response json body should have the required fields\", () => {",
									"    pm.expect(pm.response.text()).to.include(\"created\")",
									"    pm.expect(pm.response.text()).to.include(\"userName\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"})",
									"",
									"pm.test(\"Required fields should be of the right data type\", () => {",
									"  pm.expect(responseJson).to.be.an(\"object\")",
									"  pm.expect(responseJson.created).to.be.a(\"bool\")",
									"  pm.expect(responseJson.userName).to.be.a(\"array\")",
									"  pm.expect(responseJson.token).to.be.a(\"array\")",
									"});",
									"",
									"pm.test(\"Required fields should have right value\", () => {",
									"    pm.response.to.have.jsonBody('userName', 'Postman')",
									"});",
									"",
									"//set environment variable",
									"",
									"//pm.environment.set(\"unitary_test_user_id\", )"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"magicNumber\": 42,\n    \"email\": \"{{unitary_test_user_email}}\",\n    \"userName\": \"{{unitary_test_user_name}}\",\n    \"password\": \"{{unitary_test_user_password}}\",\n    \"customerInfos\": {\n        \"firstName\": \"Postman name\",\n        \"lastName\": \"Postman last name\",\n        \"phoneNumber\": \"3514831131\"\n    },\n    \"localization\": {\n        \"country\": \"WorldWideWeb\",\n        \"region\": \"World\",\n        \"adress\": \"595 Market St, San Francisco, CA 94105\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}/user/register",
							"protocol": "http",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login - post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 600ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(600)",
									"});",
									"",
									"pm.test(\"Response status should be success\", () => {",
									"    pm.response.to.have.status(\"OK\")",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
									"    pm.expect(pm.response.code).to.equal(200)",
									"    console.log(\"Reponse code is: \", pm.response.code)",
									"});",
									"",
									"pm.test(\"Response should have a json body\", () => {",
									"    pm.response.to.be.withBody",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
									"    pm.response.to.be.json",
									"})",
									"",
									"const responseJson = pm.response.json()",
									"pm.test(\"Response json body should have the required fields\", () => {",
									"    pm.expect(pm.response.text()).to.include(\"userName\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"})",
									"",
									"pm.test(\"Required fields should be of the right data type\", () => {",
									"  pm.expect(responseJson).to.be.an(\"object\")",
									"  pm.expect(responseJson.userName).to.be.a(\"array\")",
									"  pm.expect(responseJson.token).to.be.a(\"array\")",
									"});",
									"",
									"//pm.test(\"Required fields should have right value\", () => {",
									"//    pm.response.to.have.jsonBody('userName', {{unitary_test_user_name}})",
									"//});",
									"",
									"//set environment variable",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "null",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"magicNumber\": 42,\n    \"email\": \"louis.clain@epitech.eu\",\n    \"password\": \"lclainpwd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:2407/user/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "2407",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Blacklist",
			"item": [
				{
					"name": "Success",
					"item": [
						{
							"name": "blacklist - post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"OK\")",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
											"    pm.expect(pm.response.code).to.equal(200)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"BlackList\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.BlackList).to.be.a(\"array\")",
											"})",
											"",
											"pm.test(\"Response fields should match size\", () => {",
											"    pm.expect(responseJson.BlackList).to.have.length.above(0)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"{{unitary_test_user_id}}\",\n    \"number\": \"0102030405\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{base_url}}/user/blacklist",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"blacklist"
									]
								}
							},
							"response": []
						},
						{
							"name": "blacklist - get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"OK\")",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
											"    pm.expect(pm.response.code).to.equal(200)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"BlackList\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.BlackList).to.be.a(\"array\")",
											"});",
											"",
											"console.log(\"Blacklist value: \", responseJson.BlackList)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Newman -> Command line collection runner for postmman developed in node.js ",
											"",
											"pm.sendRequest(\"blacklist - post\", function (err, response) {})",
											"// pm.setNextRequest(\"blacklist - get\")",
											"// pm.sendRequest(\"blacklist - error\")"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{base_url}}/user/blacklist?userId={{unitary_test_user_id}}",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"blacklist"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{unitary_test_user_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "blacklist - error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"OK\")",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
											"    pm.expect(pm.response.code).to.equal(200)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"BlackList\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.BlackList).to.be.a(\"array\")",
											"})",
											"",
											"pm.test(\"Response fields should match size\", () => {",
											"    pm.expect(responseJson.BlackList.length).to.be.equal(0)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"{{unitary_test_user_id}}\",\n    \"number\": \"0102030405\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{base_url}}/user/blacklist",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"blacklist"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "blacklist - Error - Empty user Id and phoneNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"BAD REQUEST\")",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 500])",
											"    // pm.expect(pm.response.code).to.equal(400)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"error\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.error).to.be.a(\"string\")",
											"})",
											"",
											"pm.test(\"Response fields should match size\", () => {",
											"    pm.expect(responseJson.error).to.be.equal(\"bad_request\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"\",\n    \"number\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{base_url}}/user/blacklist",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"blacklist"
									]
								}
							},
							"response": []
						},
						{
							"name": "blacklist - Error - Wrong user Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"BAD REQUEST\")",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 500])",
											"    // pm.expect(pm.response.code).to.equal(500)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"error\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.error).to.be.a(\"string\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{base_url}}/user/blacklist?userId=-1",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"blacklist"
									],
									"query": [
										{
											"key": "userId",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "blacklist - Error - Empty user Id and phoneNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"BAD REQUEST\")",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 500])",
											"    // pm.expect(pm.response.code).to.equal(400)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"error\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.error).to.be.a(\"string\")",
											"})",
											"",
											"pm.test(\"Response fields should match size\", () => {",
											"    pm.expect(responseJson.error).to.be.equal(\"bad_request\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"\",\n    \"number\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{base_url}}/user/blacklist",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"blacklist"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "History",
			"item": [
				{
					"name": "Success",
					"item": [
						{
							"name": "history - get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"OK\")",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
											"    pm.expect(pm.response.code).to.equal(200)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"History\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.History).to.be.a(\"array\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{base_url}}/user/history?userId={{unitary_test_user_id}}",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"history"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{unitary_test_user_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "history - delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"OK\")",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
											"    pm.expect(pm.response.code).to.equal(200)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"History\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.History).to.be.a(\"array\")",
											"})",
											"",
											"pm.test(\"Response fields should match size\", () => {",
											"    pm.expect(responseJson.History.length).to.be.equal(0)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"{{unitary_test_user_id}}\",\n    \"number\": \"0102030405\",\n    \"time\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{base_url}}/user/history",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"history"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "history - Error - Wrong user Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"BAD REQUEST\")",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 500])",
											"    // pm.expect(pm.response.code).to.equal(200)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"error\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.Error).to.be.a(\"array\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{base_url}}/user/history?userId=-1",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"history"
									],
									"query": [
										{
											"key": "userId",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Whitelist",
			"item": [
				{
					"name": "Success",
					"item": [
						{
							"name": "whitelist - post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"OK\")",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
											"    pm.expect(pm.response.code).to.equal(200)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"WhiteList\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.WhiteList).to.be.a(\"array\")",
											"})",
											"",
											"pm.test(\"Response fields should match size\", () => {",
											"    pm.expect(responseJson.WhiteList).to.have.length.above(0)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"{{unitary_test_user_id}}\",\n    \"number\": \"0102030405\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{base_url}}/user/whitelist",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"whitelist"
									]
								}
							},
							"response": []
						},
						{
							"name": "whitelist - get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"OK\")",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
											"    pm.expect(pm.response.code).to.equal(200)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"WhiteList\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.WhiteList).to.be.a(\"array\")",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{base_url}}/user/whitelist?userId={{unitary_test_user_id}}",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"whitelist"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{unitary_test_user_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "whitelist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"OK\")",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
											"    pm.expect(pm.response.code).to.equal(200)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"WhileList\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.WhileList).to.be.a(\"array\")",
											"})",
											"",
											"pm.test(\"Response fields should match size\", () => {",
											"    pm.expect(responseJson.WhileList.length).to.be.equal(0)",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"{{unitary_test_user_id}}\",\n    \"number\": \"0102030405\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{base_url}}/user/whitelist",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"whitelist"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Error",
					"item": [
						{
							"name": "whitelist - Error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"BAD REQUEST\")",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 500])",
											"    pm.expect(pm.response.code).to.equal(400)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"error\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.error).to.be.a(\"string\")",
											"})",
											"",
											"pm.test(\"Response fields should match good value\", () => {",
											"    pm.expect(responseJson.error).to.be.equal(\"bad_request\")",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"\",\n    \"number\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{base_url}}/user/whitelist",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"whitelist"
									]
								}
							},
							"response": []
						},
						{
							"name": "whitelist - Error - Wrong user Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"BAD REQUEST\")",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 500])",
											"    // pm.expect(pm.response.code).to.equal(500)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"error\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.error).to.be.a(\"string\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{base_url}}/user/whitelist?userId={{unitary_test_user_id}}",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"whitelist"
									],
									"query": [
										{
											"key": "userId",
											"value": "{{unitary_test_user_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "whitelist - Error - Empty user Id and phoneNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", () => {",
											"  pm.expect(pm.response.responseTime).to.be.below(600)",
											"});",
											"",
											"pm.test(\"Response status should be success\", () => {",
											"    pm.response.to.have.status(\"BAD REQUEST\")",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 500])",
											"    // pm.expect(pm.response.code).to.equal(400)",
											"    console.log(\"Reponse code is: \", pm.response.code)",
											"});",
											"",
											"pm.test(\"Response should have a json body\", () => {",
											"    pm.response.to.be.withBody",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
											"    pm.response.to.be.json",
											"})",
											"",
											"const responseJson = pm.response.json()",
											"pm.test(\"Response json body should have the required fields\", () => {",
											"    pm.expect(pm.response.text()).to.include(\"error\")",
											"})",
											"",
											"pm.test(\"Required fields should be of the right data type\", () => {",
											"  pm.expect(responseJson).to.be.an(\"object\")",
											"  pm.expect(responseJson.error).to.be.a(\"string\")",
											"})",
											"",
											"pm.test(\"Response fields should match size\", () => {",
											"    pm.expect(responseJson.error).to.be.equal(\"bad_request\")",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": \"\",\n    \"number\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{base_url}}/user/whitelist",
									"protocol": "http",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"user",
										"whitelist"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Greylist",
			"item": [
				{
					"name": "greylist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 600ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(600)",
									"});",
									"",
									"pm.test(\"Response status should be success\", () => {",
									"    pm.response.to.have.status(\"OK\")",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201,202])",
									"    pm.expect(pm.response.code).to.equal(200)",
									"    console.log(\"Reponse code is: \", pm.response.code)",
									"});",
									"",
									"pm.test(\"Response should have a json body\", () => {",
									"    pm.response.to.be.withBody",
									"",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json')",
									"    pm.response.to.be.json",
									"})",
									"",
									"const responseJson = pm.response.json()",
									"pm.test(\"Response json body should have the required fields\", () => {",
									"    pm.expect(pm.response.text()).to.include(\"WhiteList\")",
									"    pm.expect(pm.response.text()).to.include(\"BlackList\")",
									"})",
									"",
									"pm.test(\"Required fields should be of the right data type\", () => {",
									"  pm.expect(responseJson).to.be.an(\"object\")",
									"  pm.expect(responseJson.WhiteList).to.be.a(\"array\")",
									"  pm.expect(responseJson.BlackList).to.be.a(\"array\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{base_url}}/user/greylist?userId={{unitary_test_user_id}}",
							"protocol": "http",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user",
								"greylist"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{unitary_test_user_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}